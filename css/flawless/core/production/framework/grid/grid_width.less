//
//	Massive kludge to embed columns width calculation in LESS in order 
//	to support vanilla Less.js.
//
//	Why is this code so *awful*?
//	
//		•	Less.js doesn’t support conditionals
//		•	Less.js doesn’t support returning values from a mixin; mixins must return a `property: value` pair
//		•	Inline JS in Less.js may only access the local scope--not arguments, not outer scope
//		•	It’s an interim solution that can be improved in the future when Less.js is more powerful
//
//	…But it’s still an improvement over requiring a customized Less.js!


/**
 *	@FIXME
 *	[ insert description here! ]
 */
.grid_columns_width(@count, @width, @columns) {
  @n: @count;
  @w: @width;
  @c: @columns;
  width: e(`(/\d(em|%)/.test(this.w.toJS())) ? (100 / this.c.toJS() * this.n.toJS()) + '%' : ((this.w.toJS().match(/\d/) / this.c.toJS()) * this.n.toJS()) + (this.w.toJS().match(/(mm|cm|in|pt|pc|px)/) || ['']).pop()`);
}


/**
 *	@FIXME
 *	[ insert description here! ]
 */
.grid_columns_margin_left(@count, @width, @columns) {
  @n: @count;
  @w: @width;
  @c: @columns;
  margin-left: e(`(/\d(em|%)/.test(this.w.toJS())) ? (100 / this.c.toJS() * this.n.toJS()) + '%' : ((this.w.toJS().match(/\d/) / this.c.toJS()) * this.n.toJS()) + (this.w.toJS().match(/(mm|cm|in|pt|pc|px)/) || ['']).pop()`);
}


/**
 *	@FIXME
 *	[ insert description here! ]
 */
.grid_columns_margin_right(@count, @width, @columns) {
  @n: @count;
  @w: @width;
  @c: @columns;
  margin-right: e(`(/\d(em|%)/.test(this.w.toJS())) ? (100 / this.c.toJS() * this.n.toJS()) + '%' : ((this.w.toJS().match(/\d/) / this.c.toJS()) * this.n.toJS()) + (this.w.toJS().match(/(mm|cm|in|pt|pc|px)/) || ['']).pop()`);
}


/**
 *	@FIXME
 *	[ insert description here! ]
 */
.grid_columns_left(@count, @width, @columns) {
  @n: @count;
  @w: @width;
  @c: @columns;
  left: e(`(/\d(em|%)/.test(this.w.toJS())) ? (100 / this.c.toJS() * this.n.toJS()) + '%' : ((this.w.toJS().match(/\d/) / this.c.toJS()) * this.n.toJS()) + (this.w.toJS().match(/(mm|cm|in|pt|pc|px)/) || ['']).pop()`);
}


/**
 *	@FIXME
 *	[ insert description here! ]
 */
.grid_columns_right(@count, @width, @columns) {
  @n: @count;
  @w: @width;
  @c: @columns;
  right: e(`(/\d(em|%)/.test(this.w.toJS())) ? (100 / this.c.toJS() * this.n.toJS()) + '%' : ((this.w.toJS().match(/\d/) / this.c.toJS()) * this.n.toJS()) + (this.w.toJS().match(/(mm|cm|in|pt|pc|px)/) || ['']).pop()`);
}
