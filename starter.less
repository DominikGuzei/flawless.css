/** 
 *  FLAW{LESS} Css Framework 
 *
 *  Starter Page
 *  This is an example page that shows many of the possibilities
 *	you have by using the FLAW{LESS} Css Framework. The base layout
 *	is divided into 8 columns (in this example) for all devices.
 *	Through media queries the columns change position and width
 *	if viewed with smaller screen sizes.
 *  
 *  @author: Dominik Guzei
 *  @website: wizzart.at
 *
 *  MIT-License: http://www.opensource.org/licenses/mit-license.php
 */

/* Here we import the framework. Note that this does not
 * add any styles yet. We are using the less.js framework
 * which adds variables and mixins (behave like function calls)
 * This way the framework can provide infinite features, without
 * adding anything more than you need on your website.
 */
@import "flawless/framework.less";

/* ================== SETUP THE FRAMEWORK  ==================
 * Here you can see the basic three setup variables that most
 * websites will need to set in order to use the framework.
 */
 
/* Tell the framework where it is relative to the html file  */
@setup_framework_path: "flawless";

/* The vertical rhythm is used to give your webpages a consistent
 * look. The whole grid system relies on this value to calculate
 * gaps, spans and so on. Basically this defines the row-height of
 * the grid in pixels and aligns all elements in the flow of the grid. 
 */
@setup_vertical_rhythm: 20;

/* Here you can control the overall font size. Not that this value 
 * strongly correlates with the vertical rhythm. If you make these
 * two values too different your text flow will look ugly
 */
@setup_font_size: 13;

/* The Flawless Reset is the most advanced reset mixin. You can also
 * choose eric meyers or yui reset. But if you use html5 like in this
 * example, then the flawless reset is best suited
 */
.reset_html5doctor();

/* ================= GRID SETUP ==================
 * This mixin sets up the foundation for your grid
 * it is nescessary that this is called outside any
 * element because it provides variables that must
 * be in the global scope. Otherwise the grid system
 * won't work as excpected.

 *  .grid_setup - MIXIN
 *  The core function of the grid module, that builds up
 *  the basic structure and provides you with any number of
 *  columns with custom gap size, min-width and max-width 
 *
 *  it's also the setup function for all other grid
 *  modules. So you can define most presets in one
 *  mixin call.
 *  
 *  @width   - defines the width of the grid (any css unit)
 *  @columns - specifies the number of columns in the grid (plane number)
 *  @gap     - The gap between elements in the grid (any css unit)
 *	@align   - align the grid on left / center / right side of parent
 *  @min     - minimal width of the grid (any css unit)
 *  @max     - maximal width of the grid (any css unit)
 */
.grid_setup(80%, 8, 2em, center, 0px, 960px);

/* The body element can be used to apply the vertical rhythm
 * to your document or other type and color sheme related setups */
body {
	/* This applies the vertical rhythm for the typography in your document */
	.type_rhythm();
	/* this adds the standard typography theme with custom families and colors */
	.type_theme_flawless(@type-family, @type-head-family, #333, #036);
}
/* convenient skip link functionality included in the nav module */
#skip-link {
	.nav_skip_link();
}

/* This is the wrapper element we declare as grid */
#page {
	/* This mixin makes this element a grid */
	.grid();
	margin-top: 40px; /* add a little spacing above */
	/* Here we define a linear gradient background for the whole
	 * grid element. You can see the effect at the second sidebar */
	.css3_linear_gradient(#F1F1F1, #CCC );
	/* This adds rounded corners to the page element */
	.css3_border_radius();
	/* add a smooth box shadow */
	.css3_box_shadow(2px, 2px, 10px, #999);
	/* add contrast to the page border */
	border: 1px solid #036;
}

header {
	/* the header element spans all 8 columns */
	.grid_span(8);
	/* add gaps on both sides */
	.grid_gap_both;
}

/* set the background color variable for nav, article and sidebar 1 */
@bgColor: #A3CED7;

nav#main-menu {
	/* the navigation spans all 8 columns */
	.grid_span(8);	
	/* apply the default flawless navigation theme */
	.nav_rounded_horizontal(#E3E3E3, @bgColor, #000, #000, 0px 5px 0px 0px);
}

/* this element is a wrapper for the equal columns used
 * in this example. If you don't need equal columns, than
 * you don't have to wrap them 
 */
#content {
	/* define this element as column wrapper */
	.grid_col_wrap();
	/* define it specifically as equal column wrapper */
	.grid_col_equal_wrap();	
}



article {
	.grid_span(4); /* the article is 4 columns wide */
	.grid_left(); /* it floats left */
	.grid_gap_both; /* has gaps on both sides */
	/* is shifted 2 columns to the right to swap
	 * position with the first sidebar although its
	 * the first element in markup ;-) */
	.grid_shift_right(2); 
	/* make this column an equal height column */
	.grid_col_equal();
	background-color: @bgColor; /* add background color */
}

#sidebar-1 {
	.grid_span(2); /* the sidebar is 2 columns wide */
	.grid_left(); /* it floats left (but would be beside the article on the right) */
	.grid_shift_left(4); /* if we didn't shift it to the left 4 columns */
	.grid_gap_both; /* add gaps on both sides */
	.grid_col_equal(); /* make this column an equal height column */
	background-color: @bgColor; /* add background color */
}

#sidebar-2 {
	.grid_span(2); /* the sidebar is 2 columns wide */
	.grid_right(); /* last column always floats right */
	.grid_gap_both; /* add gaps on both sides */
	.grid_col_equal(); /* make this column an equal height column */
}

footer {
	.grid_span(8); /* full 8 columns */
	text-align:center;
	border-top: 1px dashed #666;	
}

/* Now we come to the real shit. Responsive Webdesign!
 * Here define what should happen when the page is viewed
 * on a small screen or browser window. All these rules
 * apply as soon as the window size is smaller than 767px
 * but bigger than 480px (because we add another query for
 * the real small devices like iphone)
 */

@media only screen and (max-width: 767px) and (min-width: 480px) {
	
	article {
		.grid_span(8);/* make the article span the full 8 columns */
		.grid_unshift(); /* we have to undo the shifting */
		.grid_col_equal_remove(); /* remove the equal columns */
	}
	#sidebar-1 {
		.grid_span(4); /* grow the sidebar to 4 columns */
		.grid_unshift();
		.grid_col_equal_remove();
	}
	#sidebar-2 {
		.grid_span(4); /* as this one, this makes a cute 2 column layout */
		.grid_col_equal_remove();	
	}
}

/* This applies to really small devices and screens ( < 480px)
 * Here we basically make all columns span the full 8 grid cols
 * so that our content flows like a waterfall and can be better
 * viewed on iphones and other mobile phones
 */

@media only screen and (max-width: 480px) {
	article {
		.grid_span(8);
		.grid_unshift();
		.grid_col_equal_remove();
	}
	#sidebar-1 {
		.grid_span(8);
		.grid_unshift();
		.grid_col_equal_remove();
	}
	#sidebar-2 {
		.grid_span(8);	
		.grid_col_equal_remove();
	}
}